import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.jgrapht.alg.AllDirectedPaths;
import org.jgrapht.alg.ConnectivityInspector;
import org.jgrapht.alg.CycleDetector;
import org.jgrapht.alg.cycle.HawickJamesSimpleCycles;
import org.jgrapht.graph.DefaultEdge;

@SuppressWarnings("deprecation")
public class Test {

	@SuppressWarnings("deprecation")
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		int nCittà;
		int nSerbatoi;
		nCittà = scanner.nextInt();
		nSerbatoi = scanner.nextInt();
		String Vertex1;
		String Vertex2;
		StringGrafoOrientato g = new StringGrafoOrientato(DefaultEdge.class);
       int cont = 0;
		while(cont<nCittà) {
			g.addVertex(scanner.next());
			
			
		}

		while (scanner.hasNext()) {
			Vertex1 = scanner.nextInt();
			Vertex2 = scanner.nextInt();
			g.addEdge(Vertex1, Vertex2);

		}

		scanner.close();
		ConnectivityInspector<Integer, DefaultEdge> ce = new ConnectivityInspector<>(g);
		System.out.println(ce.connectedSets());
		
		System.out.println("FINE");

		CycleDetector<Integer, DefaultEdge> cd = new CycleDetector<>(g);
		HawickJamesSimpleCycles<Integer, DefaultEdge> hcd = new HawickJamesSimpleCycles<>(g);
		List<List<Integer>> cicli = hcd.findSimpleCycles();
		List<DefaultEdge> rimossi = new ArrayList<DefaultEdge>();

		System.out.println(g.toString());
		System.out.println(g.NodiColl(1));
		
		
		
	}
	
	

}
