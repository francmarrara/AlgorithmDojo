import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;


import org.jgrapht.graph.DefaultEdge;

public class Citt‡Serbatoi {
	private ArrayList<Citt‡> citt‡;
	private ArrayList<Citt‡> citt‡DaServire;
	private StringGrafoOrientato g;
	private int nCitt‡;
	private int nSerbatoiMax;
	private int Priorit‡Max;
	private int Nserbatoi;
	



public Citt‡Serbatoi() {
	setCitt‡(new ArrayList<Citt‡>());
	setCitt‡DaServire(new ArrayList<Citt‡>());
	setG(new StringGrafoOrientato(DefaultEdge.class));
	Nserbatoi=0;

}


public ArrayList<Citt‡> getCitt‡DaServire() {
	return citt‡DaServire;
}


public void setCitt‡DaServire(ArrayList<Citt‡> citt‡DaServire) {
	this.citt‡DaServire = citt‡DaServire;
}


public ArrayList<Citt‡> getCitt‡() {
	return citt‡;
}


public void setCitt‡(ArrayList<Citt‡> citt‡) {
	this.citt‡ = citt‡;
}


public StringGrafoOrientato getG() {
	return g;
}


public void setG(StringGrafoOrientato g) {
	this.g = g;
}


public int getnCitt‡() {
	return nCitt‡;
}


public void setnCitt‡(int nCitt‡) {
	this.nCitt‡ = nCitt‡;
}


public int getnSerbatoiMax() {
	return nSerbatoiMax;
}


public void setnSerbatoiMax(int nSerbatoiMax) {
	this.nSerbatoiMax = nSerbatoiMax;
}

public void riempiListe() {
	for(String c : g.vertexSet()) {
		citt‡.add(new Citt‡(c, g.inDegreeOf(c)+g.outDegreeOf(c)));
		citt‡DaServire.add(new Citt‡(c, g.inDegreeOf(c)+g.outDegreeOf(c)));
	}
}

public void priorit‡Max() {
	int max=0;
	for(Citt‡ c : citt‡DaServire) {
		if(c.getPriorit‡()>max)
			max=c.getPriorit‡();
	}
this.Priorit‡Max=max;

}


public int getPriorit‡Max() {
	return Priorit‡Max;
}


public void setPriorit‡Max(int priorit‡Max) {
	Priorit‡Max = priorit‡Max;
}

public void serbatoiInScollegate() {
	for(Citt‡ c : citt‡) {
        if(c.getPriorit‡()==0) {
        	c.setHasSerbatoio(true);
        	citt‡DaServire.remove(c);
        	Nserbatoi++;
        }

}
	}

public boolean tuttiServiti() {
	if(citt‡DaServire.size()==0)
		return true;
	return false;
}

public void rimuoviCitt‡Collegate(String NomeCitt) {
	Set<DefaultEdge> nodiCollUscita;
	Set<DefaultEdge> nodiCollEntrata;

	nodiCollUscita=g.outgoingEdgesOf(NomeCitt);
	nodiCollEntrata=g.incomingEdgesOf(NomeCitt);
	
	Set<String> citt‡daRimuovere = new HashSet<String>();
	
	for(DefaultEdge dg : nodiCollEntrata) {
		citt‡daRimuovere.add(g.getEdgeTarget(dg));
		}
	for(DefaultEdge dg : nodiCollUscita) {
		citt‡daRimuovere.add(g.getEdgeTarget(dg));
		}
	
	Iterator<String> it = citt‡daRimuovere.iterator();
	
	while(citt‡daRimuovere.size()>0) {
		String citt‡ = it.next();
		for(Citt‡ c : citt‡DaServire) {
			if(c.getNome()==citt‡) {
				citt‡DaServire.remove(c);
				break;
			}
		}
	citt‡daRimuovere.remove(it);
	}
	
}



public int getNserbatoi() {
	return Nserbatoi;
}


public void setNserbatoi(int nserbatoi) {
	Nserbatoi = nserbatoi;
}

}